import SwiftUI
import AVFoundation

class MIDIPlayer: ObservableObject {
    private var engine = AVAudioEngine()
    private var sampler = AVAudioUnitSampler()
    private var currentNotes: [UInt8] = []
    private var decayTask: DispatchWorkItem?

    private let velocity: UInt8 = 100
    private let decayDuration: TimeInterval = 0.5

    private var bankURL: URL?

    init() {
        engine.attach(sampler)
        engine.connect(sampler, to: engine.mainMixerNode, format: nil)
        try? engine.start()

        if let url = Bundle.main.url(forResource: "GeneralUser-GS", withExtension: "sf2") {
            self.bankURL = url
            setInstrument(program: 18) // Default to Rock Organ
        }
    }

    func setInstrument(program: UInt8) {
        guard let bankURL = bankURL else { return }
        try? sampler.loadSoundBankInstrument(
            at: bankURL,
            program: program,
            bankMSB: UInt8(kAUSampler_DefaultMelodicBankMSB),
            bankLSB: 0
        )
    }

    func playChord(notes: [UInt8]) {
        stopChord()
        currentNotes = notes
        for note in notes {
            sampler.startNote(note, withVelocity: velocity, onChannel: 0)
        }
    }

    func releaseChord() {
        decayTask?.cancel()
        let task = DispatchWorkItem {
            for note in self.currentNotes {
                self.sampler.stopNote(note, onChannel: 0)
            }
            self.currentNotes = []
        }
        decayTask = task
        DispatchQueue.main.asyncAfter(deadline: .now() + decayDuration, execute: task)
    }

    private func stopChord() {
        for note in currentNotes {
            sampler.stopNote(note, onChannel: 0)
        }
        currentNotes = []
        decayTask?.cancel()
    }
}

struct ContentView: View {
    @StateObject private var midiPlayer = MIDIPlayer()
    @State private var selectedProgram: Int = 18
    @State private var showInstrumentPicker = false

    //let chordTypes = ["dim", "aug", "m", "7", ""]
    let chordTypes = ["", "7", "m", "aug", "dim"]
    let tonicOrder = ["Eb", "Bb", "F", "C", "G", "D", "A", "E", "B", "F#", "Db", "Ab"]

    var body: some View {
        GeometryReader { geo in
            let buttonWidth = geo.size.width / CGFloat(tonicOrder.count) * 0.9
            let buttonHeight = geo.size.height / CGFloat(chordTypes.count + 2)

            VStack(spacing: 0) {
                HStack {
                    Spacer()
                    Button(action: {
                        showInstrumentPicker.toggle()
                    }) {
                        Text("\(selectedProgram): \(instrumentNames[selectedProgram])")
                            .font(.footnote)
                            .foregroundColor(.blue)
                    }
                    .padding(.horizontal)
                    .padding(.top, 4)
                    .sheet(isPresented: $showInstrumentPicker) {
                        NavigationView {
                            List(instrumentNames.indices, id: \ .self) { i in
                                Button("\(i): \(instrumentNames[i])") {
                                    selectedProgram = i
                                    midiPlayer.setInstrument(program: UInt8(i))
                                    showInstrumentPicker = false
                                }
                            }
                            .navigationTitle("Select Instrument")
                            .navigationBarTitleDisplayMode(.inline)
                        }
                    }
                }

                Spacer(minLength: 4)

                LazyVGrid(columns: Array(repeating: GridItem(.flexible(), spacing: 4), count: tonicOrder.count), spacing: 4) {
                    ForEach(chordTypes.reversed(), id: \ .self) { chordType in
                        ForEach(tonicOrder, id: \ .self) { tonic in
                            let label = tonic + chordType
                            chordButton(label: label, width: buttonWidth, height: buttonHeight)
                        }
                    }
                }
                .padding(.horizontal, 8)
                .padding(.bottom)
            }
            .onAppear {
                midiPlayer.setInstrument(program: UInt8(selectedProgram))
            }
        }
    }

    func chordButton(label: String, width: CGFloat, height: CGFloat) -> some View {
        Button(action: {}) {
            Text(label)
                .frame(width: width, height: height)
                .background(Color.blue)
                .foregroundColor(.white)
                .cornerRadius(6)
                .font(.system(size: 12))
        }
        .simultaneousGesture(
            LongPressGesture(minimumDuration: 0)
                .onEnded { _ in
                    if let notes = chordDict[label] {
                        midiPlayer.playChord(notes: notes)
                    }
                }
                .sequenced(before: DragGesture(minimumDistance: 0))
                .onEnded { _ in
                    midiPlayer.releaseChord()
                }
        )
    }

    let chordDict: [String: [UInt8]] = [
        "C": [36, 48, 52, 55], "C7": [36, 48, 52, 55, 58], "Cm": [36, 48, 51, 55], "Caug": [36, 48, 52, 56], "Cdim": [36, 48, 51, 54],
        "D": [38, 50, 54, 57], "D7": [38, 50, 54, 57, 60], "Dm": [38, 50, 53, 57], "Daug": [38, 50, 54, 58], "Ddim": [38, 50, 53, 56],
        "E": [40, 52, 56, 59], "E7": [40, 52, 56, 59, 62], "Em": [40, 52, 55, 59], "Eaug": [40, 52, 56, 60], "Edim": [40, 52, 55, 58],
        "F": [41, 53, 57, 60], "F7": [41, 53, 57, 60, 63], "Fm": [41, 53, 56, 60], "Faug": [41, 53, 57, 61], "Fdim": [41, 53, 56, 59],
        "G": [43, 55, 59, 62], "G7": [43, 55, 59, 62, 65], "Gm": [43, 55, 58, 62], "Gaug": [43, 55, 59, 63], "Gdim": [43, 55, 58, 61],
        "A": [45, 57, 61, 64], "A7": [45, 57, 61, 64, 67], "Am": [45, 57, 60, 64], "Aaug": [45, 57, 61, 65], "Adim": [45, 57, 60, 63],
        "B": [47, 59, 63, 66], "B7": [47, 59, 63, 66, 69], "Bm": [47, 59, 62, 66], "Baug": [47, 59, 63, 67], "Bdim": [47, 59, 62, 65],
        "F#": [54, 66, 70, 73], "F#7": [54, 66, 70, 73, 76], "F#m": [54, 66, 69, 73], "F#aug": [54, 66, 70, 74], "F#dim": [54, 66, 69, 72],
        "Db": [49, 61, 65, 68], "Db7": [49, 61, 65, 68, 71], "Dbm": [49, 61, 64, 68], "Dbaug": [49, 61, 65, 69], "Dbdim": [49, 61, 64, 67],
        "Ab": [44, 56, 60, 63], "Ab7": [44, 56, 60, 63, 66], "Abm": [44, 56, 59, 63], "Abaug": [44, 56, 60, 64], "Abdim": [44, 56, 59, 62],
        "Eb": [39, 51, 55, 58], "Eb7": [39, 51, 55, 58, 61], "Ebm": [39, 51, 54, 58], "Ebaug": [39, 51, 55, 59], "Ebdim": [39, 51, 54, 57],
        "Bb": [46, 58, 62, 65], "Bb7": [46, 58, 62, 65, 68], "Bbm": [46, 58, 61, 65], "Bbaug": [46, 58, 62, 66], "Bbdim": [46, 58, 61, 64]
    ]

    let instrumentNames: [String] = [
        "Acoustic Grand Piano", "Bright Acoustic Piano", "Electric Grand Piano", "Honky-tonk Piano",
        "Electric Piano 1", "Electric Piano 2", "Harpsichord", "Clavinet",
        "Celesta", "Glockenspiel", "Music Box", "Vibraphone",
        "Marimba", "Xylophone", "Tubular Bells", "Dulcimer",
        "Drawbar Organ", "Percussive Organ", "Rock Organ", "Church Organ",
        "Reed Organ", "Accordion", "Harmonica", "Tango Accordion",
        "Acoustic Guitar (nylon)", "Acoustic Guitar (steel)", "Electric Guitar (jazz)", "Electric Guitar (clean)",
        "Electric Guitar (muted)", "Overdriven Guitar", "Distortion Guitar", "Guitar Harmonics",
        "Acoustic Bass", "Electric Bass (finger)", "Electric Bass (pick)", "Fretless Bass",
        "Slap Bass 1", "Slap Bass 2", "Synth Bass 1", "Synth Bass 2",
        "Violin", "Viola", "Cello", "Contrabass",
        "Tremolo Strings", "Pizzicato Strings", "Orchestral Harp", "Timpani",
        "String Ensemble 1", "String Ensemble 2", "Synth Strings 1", "Synth Strings 2",
        "Choir Aahs", "Voice Oohs", "Synth Voice", "Orchestra Hit",
        "Trumpet", "Trombone", "Tuba", "Muted Trumpet",
        "French Horn", "Brass Section", "Synth Brass 1", "Synth Brass 2",
        "Soprano Sax", "Alto Sax", "Tenor Sax", "Baritone Sax",
        "Oboe", "English Horn", "Bassoon", "Clarinet",
        "Piccolo", "Flute", "Recorder", "Pan Flute"
    ]
}

